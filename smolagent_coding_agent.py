# %%
from smolagents import CodeAgent, FinalAnswerTool

from gdm_hackathon.models.vertex_models import get_model

# Remove the immediate evaluation call - it will be called when needed
# results = evaluate_report_relevance_in_zero_shot(
#     "load_histopathological_immune_infiltration_report",
#     "load_histopathological_tumor_stroma_compartments_report",
# )
from gdm_hackathon.tools import (
    load_b_cell_heatmap_report,
    load_cdk12_heatmap_report,
    load_dc_heatmap_report,
    load_egfr_heatmap_report,
    load_endothelial_heatmap_report,
    load_epithelial_heatmap_report,
    load_erbb2_heatmap_report,
    load_fgfr3_heatmap_report,
    load_fibroblast_heatmap_report,
    load_granulocyte_heatmap_report,
    load_il1b_heatmap_report,
    load_krt7_heatmap_report,
    load_malignant_bladder_heatmap_report,
    load_mast_heatmap_report,
    load_momac_heatmap_report,
    load_muscle_heatmap_report,
    load_other_heatmap_report,
    load_pik3ca_heatmap_report,
    load_plasma_heatmap_report,
    load_rb1_heatmap_report,
    load_s100a8_heatmap_report,
    load_t_nk_heatmap_report,
    load_tp53_heatmap_report,
)
from gdm_hackathon.tools.evaluation_tool import evaluate_report_relevance_in_zero_shot
from gdm_hackathon.tools.hipe_report.hipe_tool import (
    load_histopathological_immune_infiltration_report,
    load_histopathological_tumor_nuclear_morphometry_report,
    load_histopathological_tumor_stroma_compartments_report,
)

final_answer_tool = FinalAnswerTool()

# %%

model = get_model("gemma-3-27b")

# %%
# Define the coding agent
coding_agent = CodeAgent(
    model=model,
    name="coding_agent",
    description="A coding agent that selects the best 2 tools out of 3 available tools.",
    tools=[
        evaluate_report_relevance_in_zero_shot,  # evaluation tool
        load_cdk12_heatmap_report,  # spatial transcriptomics heatmap tools (cell type specific)
        load_dc_heatmap_report,
        load_b_cell_heatmap_report,
        load_egfr_heatmap_report,
        load_erbb2_heatmap_report,
        load_endothelial_heatmap_report,
        load_epithelial_heatmap_report,
        load_fgfr3_heatmap_report,
        load_fibroblast_heatmap_report,
        load_granulocyte_heatmap_report,
        load_il1b_heatmap_report,
        load_krt7_heatmap_report,
        load_malignant_bladder_heatmap_report,
        load_mast_heatmap_report,
        load_momac_heatmap_report,
        load_muscle_heatmap_report,
        load_other_heatmap_report,
        load_pik3ca_heatmap_report,
        load_plasma_heatmap_report,
        load_rb1_heatmap_report,
        load_s100a8_heatmap_report,
        load_tp53_heatmap_report,
        load_t_nk_heatmap_report,
        load_histopathological_immune_infiltration_report,  # histopathological report family
        load_histopathological_tumor_stroma_compartments_report,
        load_histopathological_tumor_nuclear_morphometry_report,
        final_answer_tool,
    ],
    max_steps=10,
)


# %%
# Function to run the coding agent
def run_coding_agent(case_id: str = "MW_B_001"):
    """Run the smolagent coding agent to find the best report combination for survival prediction.

    Args:
        case_id (str): The patient/case ID to analyze (e.g., "Case 001 - Lung Adenocarcinoma")
    """
    prompt = f"""
    You are a biomedical AI coding agent tasked with finding the optimal combination of medical reports for predicting patient survival response.

    ## Available Tools:
    You have access to several medical report tools, which can be classified into different families, depending on the modality studied in the report. Each tool provides different types of patient information:
    1. **load_{{celltype}}_heatmap_report**: Provides information on the spatial distribution and density of a specific cell type in the tissue sample. This report is generated by a spatial transcriptomics analysis.
    2. **load_histopathological_*_report**: Provides information from the histopathological analysis of the tissue sample. 

    ## Your Mission:
    Your goal is to determine which combination of 2 reports provides the best information for predicting whether a patient will respond to treatment (survival prediction).

    ## Evaluation Process:
    To evaluate the quality of different report combinations, you have access to the **evaluate_report_relevance_in_zero_shot** tool. This tool is of utmost importance, and you should use it to evaluate the quality of your report combinations:

    Namely it:
    - Takes 2 tool names as input, which are selected from the function names of the tools you have access to.
        Usage example: evaluate_report_relevance_in_zero_shot(tool1_name="load_cdk12_heatmap_report", tool2_name="load_dc_heatmap_report")
    - Generates combined reports for all patients using those 2 tools
    - Uses MedGemma (a medical AI model) to predict treatment response for each patient.
    - Compares predictions against ground truth data
    - Returns an accuracy score showing how well the combined reports predict treatment response

    ## Your Task:
    1. **Investigate each tool**: First, examine what each tool returns by testing them on the specified patient, name="{case_id}" to understand the type and quality of information provided.
    2. **Select the most promising combination**: Select the 3 most promising combination of 2 tools for survival prediction. 
    3. **Evaluate the resulting accuracy**: Evaluate the resulting accuracy of the 3 selected combination of 2 tools for survival prediction.
    4. **Iterate at most 3 times step 2 and 3**: Iterate step 2 and 3.
    5. **Provide recommendation**: Based on your analysis, recommend the best combination of 2 tools for survival prediction and explain your reasoning.

    ## Expected Output:
    Your response should include:
    - Accuracy scores from evaluating all 3 combinations using evaluate_report_relevance_in_zero_shot
    - Clear recommendation of the best combination
    - Detailed explanation of why this combination is optimal for survival prediction

    ## Important Notes:
    - A "full report" consists of exactly 2 sub-reports combined
    - The goal is to maximize the accuracy of treatment response prediction
    - Do not evaluate more than 3 combinaisons at one! It is important to evaluate the combinaisons in a systematic way.
    - Think of this optimization as a genetic algorithm, where you are trying to find the best combination of 2 tools for survival prediction.
    - The evaluation tool uses real patient data and MedGemma predictions, so the results are meaningful

    Start by investigating each tool, then optimize in a genetic way the combinations to find the optimal pair for survival prediction. 
    You can use the final_answer_tool to provide your final answer.

    Your first output should be a test:

    Thought: I will proceed step by step and test the tool load_cdk12_heatmap_report on {case_id}. 
    <code>
    print(load_cdk12_heatmap_report("{case_id}"))
    print(load_histopathological_immune_infiltration_report("{case_id}"))
    </code>

    Let begin ! 
    """

    response = coding_agent.run(prompt)
    return response


if __name__ == "__main__":
    result = run_coding_agent()
    print(result)
# %%
