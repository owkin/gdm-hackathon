#!/usr/bin/env python3
"""
Genomic Report Generation Tool using medgemma

This tool loads mutated genes data from Google Storage bucket, generates medical summaries
using the medgemma-27b model, and saves the descriptions back to the bucket.
"""
# %%
import re
import gcsfs
import json
import requests
from datetime import datetime
from gdm_hackathon.config import GCP_PROJECT_ID
from gdm_hackathon.models.vertex_models import get_access_token, get_endpoint_url, ENDPOINT_MODELS_DICT
from gdm_hackathon.utils import convert_to_mw_id

MODEL = "medgemma-27b"

def generate_genomic_summary(patient_id: str, data_type: str, mutated_genes: list) -> str:
    """
    Generate a medical summary for a patient's genomic data using medgemma-27b.
    
    Args:
        patient_id: The unique identifier for the patient (e.g., 'CH_B_030a')
        data_type: The type of genomic data (e.g., 'snv_indel', 'cnv', 'cna', 'gii', 'tmb')
        mutated_genes: List of mutated genes or genomic information
        
    Returns:
        A medical summary generated by the model
    """
    try:
        # Create a prompt for the genomic analysis
        if data_type in ["snv_indel", "cnv", "cna"]:
            prompt = f"""
You are a medical AI assistant analyzing genomic data for medical research and patient outcome prediction.

I am providing you with genomic data for a bladder cancer patient:
- Data type: {data_type.upper()}
- Number of affected genes: {len(mutated_genes)}
- Affected genes: {', '.join(mutated_genes)}

Please provide a detailed medical analysis including:
1. Overall genomic profile assessment for this patient
2. Key genes and their potential clinical significance
3. Potential implications for treatment and prognosis
4. Any notable patterns or unusual findings
5. Recommendations for further analysis or clinical considerations

Focus on providing concise and actionable medical insights that would be useful for clinicians.
Use medical terminology appropriately and explain complex concepts clearly.


IMPORTANT: Start directly with the analysis. Do not include any introductory phrases like "Okay," "I'll analyze," or similar pleasantries. Do not include any disclaimers at the end. Provide only the medical analysis.
"""
        elif data_type in ["gii", "tmb"]:
            # For score-based data types, the mutated_genes list contains the sentence
            score_info = mutated_genes[0] if mutated_genes else "No score available"
            prompt = f"""
You are a medical AI assistant analyzing genomic scores for medical research and patient outcome prediction.

I am providing you with genomic score data for a bladder cancer patient:
- Data type: {data_type.upper()}
- Score information: {score_info}

Please provide a detailed medical analysis including:
1. Interpretation of this {data_type.upper()} score in clinical context
2. What this score indicates about the patient's genomic profile
3. Potential implications for treatment decisions
4. Prognostic significance of this score
5. Recommendations for clinical management based on this score

Focus on providing concise and actionable medical insights that would be useful for clinicians.
Use medical terminology appropriately and explain the clinical relevance of this score.


IMPORTANT: Start directly with the analysis. Do not include any introductory phrases like "Okay," "I'll analyze," or similar pleasantries. Do not include any disclaimers at the end. Provide only the medical analysis.
"""
        else:
            return f"Error: Unknown data type {data_type}"
        
        # Get the API credentials and endpoint
        api_key = get_access_token()
        api_base = get_endpoint_url(MODEL)
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        payload = {
            "model": ENDPOINT_MODELS_DICT[MODEL]["model_id"],
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 4096,
            "temperature": 0.2
        }
        
        response = requests.post(
            f"{api_base}/chat/completions",
            headers=headers,
            json=payload
        )
        
        if response.status_code == 200:
            result = response.json()
            summary = result["choices"][0]["message"]["content"]
            
            # Replace the CH patient ID with the MW patient ID
            patient_id_pattern = re.compile(r'CH_B_\d+a')
            summary = patient_id_pattern.sub(convert_to_mw_id(patient_id), summary)

            return summary
        else:
            return f"Error: API call failed with status {response.status_code}: {response.text}"
        
    except Exception as e:
        return f"Error generating genomic summary for {patient_id}_{data_type}: {str(e)}"

def load_mutated_genes_from_bucket(patient_id: str, data_type: str) -> dict | None:
    """
    Load mutated genes data from the bucket for a specific patient and data type.
    
    Args:
        patient_id: The unique identifier for the patient
        data_type: The type of genomic data
        
    Returns:
        Dictionary containing the genomic data
    """
    try:
        # Initialize GCS filesystem
        fs = gcsfs.GCSFileSystem(project=GCP_PROJECT_ID)
        bucket_name = "gdm-hackathon"
        
        # Define the bucket path
        bucket_path = f"{bucket_name}/data/mutated_genes/{patient_id}_{data_type}_genes.json"
        
        if not fs.exists(bucket_path):
            return None
        
        # Load the data from the bucket
        with fs.open(bucket_path, 'r') as f:
            data = json.load(f)
        
        return data
        
    except Exception as e:
        print(f"Error loading data for {patient_id}_{data_type}: {str(e)}")
        return None

def save_genomic_description_to_bucket(patient_id: str, data_type: str, summary: str, original_data: dict) -> str:
    """
    Save the genomic description to the bucket.
    
    Args:
        patient_id: The unique identifier for the patient
        data_type: The type of genomic data
        summary: The generated medical summary
        original_data: The original genomic data
        
    Returns:
        Path where the description was saved
    """
    try:
        # Initialize GCS filesystem
        fs = gcsfs.GCSFileSystem(project=GCP_PROJECT_ID)
        bucket_name = "gdm-hackathon"
        
        # Get the mapped patient ID
        mapped_patient_id = convert_to_mw_id(patient_id)
        
        # Create the description data structure
        description_data = {
            "patient_id": mapped_patient_id,
            "original_patient_id": patient_id,
            "data_type": data_type,
            "summary": summary,
            "generated_at": datetime.now().isoformat(),
            "model_used": MODEL
        }
        
        # Save the description to the bucket using the mapped patient ID
        description_path = f"{bucket_name}/data/mutated_genes/descriptions/{mapped_patient_id}_{data_type}_description.json"
        
        with fs.open(description_path, 'w') as f:
            json.dump(description_data, f, indent=2)
        
        return f"gs://{description_path}"
        
    except Exception as e:
        return f"Error saving description for {patient_id}_{data_type}: {str(e)}"

def list_available_genomic_data() -> tuple[list[str], list[str]]:
    """
    List all available patients and data types in the bucket.
    
    Returns:
        Tuple of (patient_ids, data_types)
    """
    try:
        # Initialize GCS filesystem
        fs = gcsfs.GCSFileSystem(project=GCP_PROJECT_ID)
        bucket_name = "gdm-hackathon"
        data_path = f"{bucket_name}/data/mutated_genes/"
        
        if not fs.exists(data_path):
            return [], []
        
        # List all files in the mutated_genes directory
        files = fs.ls(data_path)
        
        if not files:
            return [], []
        
        # Extract patient_id and data_type from filenames
        patient_ids = []
        data_types = []
        for file_path in files:
            filename = file_path.split('/')[-1]
            if filename.endswith('_genes.json'):
                base_name = filename.replace('_genes.json', '')
                
                # Use regex to match the patient ID pattern (CH_B_030a, CH_B_033a, etc.)
                patient_match = re.match(r'(CH_B_\d+a)', base_name)
                
                if patient_match:
                    patient_id = patient_match.group(1)
                    # Extract data_type by removing the patient_id and any leading underscore
                    data_type = base_name[len(patient_id):].lstrip('_')
                    
                    if patient_id not in patient_ids:
                        patient_ids.append(patient_id)
                    if data_type not in data_types:
                        data_types.append(data_type)
        
        return patient_ids, data_types
        
    except Exception as e:
        print(f"Error listing available data: {str(e)}")
        return [], []

def generate_genomic_description(patient_id: str, data_type: str) -> str:
    """
    Generate a genomic description for a patient and data type.
    
    Args:
        patient_id: The unique identifier for the patient
        data_type: The type of genomic data
        
    Returns:
        A success message with the saved description path
    """
    try:
        # Load the genomic data from the bucket
        genomic_data = load_mutated_genes_from_bucket(patient_id, data_type)
        
        if genomic_data is None:
            return f"Error: No genomic data found for {patient_id}_{data_type}"
        
        # Extract the mutated genes
        mutated_genes = genomic_data.get("mutated_genes", [])
        
        # Generate the summary using medgemma
        print(f"Generating summary for {patient_id}_{data_type}...")
        summary = generate_genomic_summary(patient_id, data_type, mutated_genes)
        
        # Save the description to the bucket
        description_path = save_genomic_description_to_bucket(patient_id, data_type, summary, genomic_data)
        
        return f"Success! Description saved to {description_path}\n\nSummary preview: {summary[:200]}..."
        
    except Exception as e:
        return f"Error generating genomic description for {patient_id}_{data_type}: {str(e)}"

# %%
if __name__ == "__main__":
    # Test the tools
    print("Available patients and data types:")
    patient_ids, data_types = list_available_genomic_data()
    print(f"Patients: {patient_ids}")
    print(f"Data types: {data_types}")
    print("\n" + "="*60)
    
    # Test with a sample patient/data_type
    if patient_ids and data_types:
        print("Testing genomic description generation:")
        print(generate_genomic_description(patient_ids[0], data_types[0]))

# %%
# Generate descriptions for all patients and data types
patient_ids, data_types = list_available_genomic_data()

print(f"Generating genomic descriptions for {len(patient_ids)} patients and {len(data_types)} data types...")
print("=" * 60)

for patient_id in patient_ids:
    for data_type in data_types:
        print(f"\nGenerating description for {patient_id} and {data_type}")
        result = generate_genomic_description(patient_id, data_type)
        print(result)
        print("-" * 60)

print("\nAll genomic descriptions have been generated and saved to the bucket!")

# %% 