#!/usr/bin/env python3
"""
Bulk RNAseq Pathway Report Generation Tool using medgemma

This tool loads pathway signature scores from Google Storage bucket, generates medical summaries
using the medgemma-27b model, and saves the descriptions back to the bucket.
"""
# %%
import re
import gcsfs
import json
import requests
from datetime import datetime

from gdm_hackathon.config import GCP_PROJECT_ID
from gdm_hackathon.models.vertex_models import get_access_token, get_endpoint_url
from gdm_hackathon.config import ENDPOINT_MODELS_DICT as MODELS_DICT
from gdm_hackathon.utils import convert_to_mw_id

MODEL = "medgemma-27b"


# Define gene signatures for pathway interpretation
PATHWAY_GENES = {
    "fgfr3": ["FGFR3", "FGF1", "FGF2", "FRS2", "GRB2", "SOS1", "HRAS", "KRAS", "BRAF", "MAP2K1", "MAPK1", "PIK3CA", "PIK3R1", "AKT1", "PLCG1", "STAT3", "PTPN11"],
    "egfr": ["EGFR", "EGF", "TGFA", "AREG", "EREG", "HBEGF", "BTC", "ERBB2", "ERBB3", "GRB2", "SOS1", "SHC1", "CBL", "GAB1", "STAT3", "STAT5A", "PIK3CA", "AKT1", "MAPK1", "MAPK3"],
    "pi3k": ["PIK3CA", "PIK3CB", "PIK3R1", "PIK3R2", "PTEN", "AKT1", "AKT2", "AKT3", "MTOR", "RPS6KB1", "EIF4EBP1", "GSK3B", "FOXO1", "FOXO3", "CDKN1B"],
    "anti_pd1": ["CCL5", "CD27", "CD274", "CD276", "CD8A", "CMKLR1", "CXCL9", "CXCR6", "HLA-DQA1", "HLA-DRB1", "HLA-E", "IDO1", "LAG3", "NKG7", "PDCD1LG2", "PSMB10", "STAT1", "TIGIT"],
    "tgf_beta": ["TGFB1", "TGFB2", "TGFB3", "TGFBR1", "TGFBR2", "SMAD2", "SMAD3", "SMAD4", "SMAD7", "SKI", "SKIL", "ID1", "SERPINE1", "COL1A1", "THBS1"],
    "hypoxia": ["HIF1A", "EPAS1", "ARNT", "VEGFA", "ADM", "ALDOA", "BNIP3", "CA9", "ENO1", "EGLN1", "HK2", "LDHA", "NDRG1", "P4HA1", "PDK1", "PGK1", "SLC2A1"],
    "emt": ["FN1", "VIM", "CDH2", "SNAI1", "SNAI2", "TWIST1", "ZEB1", "ZEB2", "MMP2", "MMP9", "COL1A1", "COL5A2", "ITGAV", "ITGB6", "SERPINE1", "TGFB1", "WNT5A", "ACTA2", "TAGLN", "SPARC"],
    "cell_cycle": ["CDC20", "CDK1", "CCNA2", "CCNB1", "CCNB2", "PLK1", "BUB1", "BUB1B", "PTTG1", "AURKA", "AURKB", "CENPA", "CENPE", "CENPF", "KIF2C", "TOP2A", "NUSAP1", "CDKN3", "CDC25C", "ESPL1"],
    "ddr_deficiency": ["ATM", "ATR", "BRCA1", "BRCA2", "PALB2", "FANCA", "FANCC", "ERCC2", "MLH1", "MSH2", "MSH6", "PMS2", "RAD51", "CHEK2"],
    "p53": ["TP53", "MDM2", "CDKN1A", "GADD45A", "BAX", "PMAIP1", "BBC3", "DDB2", "RPS27L", "SESN1", "SESN2", "XPC", "ZMAT3", "POLH"]
}


def generate_pathway_summary(patient_id: str, pathway_name: str, pathway_score: float, all_pathway_scores: dict, pathway_genes: list) -> str:
    """
    Generate a medical summary for a patient's pathway data using medgemma-27b.
    
    Args:
        patient_id: The unique identifier for the patient (e.g., 'CH_B_030')
        pathway_name: The name of the pathway (e.g., 'fgfr3', 'egfr')
        pathway_score: The SSGSEA score for the specific pathway
        all_pathway_scores: Dictionary of all pathway scores for context
        pathway_genes: List of genes in the pathway of interest
        
    Returns:
        A medical summary generated by the model
    """
    try:
        # Create a comprehensive prompt for pathway analysis
        prompt = f"""
        You are a medical AI assistant analyzing bulk RNAseq pathway activity data for bladder cancer research and patient outcome prediction.
        
        I am providing you with pathway activity data for a bladder cancer patient:
        - Patient ID: {patient_id}
        - Pathway of interest: {pathway_name.upper()}
        - Pathway activity single-sample gene set enrichment analysis (SSGSEA) score: {pathway_score:.4f}
        - Genes in this pathway: {', '.join(pathway_genes)}
        
        Context - All pathway scores for this patient:
        {json.dumps(all_pathway_scores, indent=2)}
        
        The SSGEA score is a measure of the activity of a pathway in a patient's tumor.
        Its values are in [-0.5, 0.5], with 0.5 being the maximum where all of the genes in the pathway are more expressed than all other protein coding genes.
        
        Provide a concise medical analysis focused specifically on the {pathway_name.upper()} pathway. Start directly with the analysis - no introductions or pleasantries. Include:
        
        1. **Pathway Activity Interpretation**: What does this {pathway_name.upper()} pathway score indicate about the patient's tumor biology?
        
        2. **Clinical Significance**: How does this pathway activity relate to bladder cancer progression, treatment response, or prognosis?
        
        3. **Therapeutic Implications**: What treatment strategies might be most effective given this pathway activity level?
        
        4. **Biological Context**: How does this pathway interact with other pathways in this patient's tumor (consider the other pathway scores provided)?
        
        5. **Key Genes**: Which genes in this pathway are most critical for understanding the patient's tumor biology?
        
        6. **Clinical Recommendations**: What specific clinical actions or further testing would you recommend based on this pathway analysis?
        
        Focus your analysis specifically on the {pathway_name.upper()} pathway while using the other pathway scores as context. 
        Use medical terminology appropriately and provide actionable insights for clinicians.
        Be specific about the clinical implications of this pathway activity level.
        
        IMPORTANT: Start directly with the analysis. Do not include any introductory phrases like "Okay," "I'll analyze," or similar pleasantries. Do not include any disclaimers at the end. Provide only the medical analysis.
        """
        
        # Get the API credentials and endpoint
        api_key = get_access_token()
        api_base = get_endpoint_url(MODEL)
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        payload = {
            "model": MODELS_DICT[MODEL]["model_id"],
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 4096,
            "temperature": 0.2
        }
        
        response = requests.post(
            f"{api_base}/chat/completions",
            headers=headers,
            json=payload
        )
        
        if response.status_code == 200:
            result = response.json()
            summary = result["choices"][0]["message"]["content"]
            return summary
        else:
            return f"Error: API call failed with status {response.status_code}: {response.text}"
        
    except Exception as e:
        return f"Error generating pathway summary for {patient_id}_{pathway_name}: {str(e)}"

def load_pathway_scores_from_bucket(patient_id: str) -> dict | None:
    """
    Load pathway signature scores from the bucket for a specific patient.
    
    Args:
        patient_id: The unique identifier for the patient
        
    Returns:
        Dictionary containing the pathway signature scores
    """
    try:
        # Initialize GCS filesystem
        fs = gcsfs.GCSFileSystem(project=GCP_PROJECT_ID)
        bucket_name = "gdm-hackathon"
        
        # Define the bucket path
        bucket_path = f"{bucket_name}/data/bulk_rna_pathways/{patient_id}_signature_scores.json"
        
        if not fs.exists(bucket_path):
            return None
        
        # Load the data from the bucket
        with fs.open(bucket_path, 'r') as f:
            data = json.load(f)
        
        return data
        
    except Exception as e:
        print(f"Error loading pathway data for {patient_id}: {str(e)}")
        return None

def save_pathway_description_to_bucket(patient_id: str, pathway_name: str, summary: str, original_data: dict) -> str:
    """
    Save the pathway description to the bucket.
    
    Args:
        patient_id: The unique identifier for the patient
        pathway_name: The name of the pathway
        summary: The generated medical summary
        original_data: The original pathway data
        
    Returns:
        Path where the description was saved
    """
    try:
        # Initialize GCS filesystem
        fs = gcsfs.GCSFileSystem(project=GCP_PROJECT_ID)
        bucket_name = "gdm-hackathon"
        
        # Get the mapped patient ID
        mapped_patient_id = convert_to_mw_id(patient_id)
        
        # Create the description data structure
        description_data = {
            "patient_id": mapped_patient_id,
            "original_patient_id": patient_id,
            "pathway_name": pathway_name,
            "pathway_score": original_data.get("signature_scores", {}).get(pathway_name, "N/A"),
            "summary": summary,
            "generated_at": datetime.now().isoformat(),
            "model_used": MODEL,
            "method": "SSGSEA"
        }
        
        # Save the description to the bucket using the mapped patient ID
        description_path = f"{bucket_name}/data/bulk_rna_pathways/descriptions/{mapped_patient_id}_{pathway_name}_description.json"
        
        with fs.open(description_path, 'w') as f:
            json.dump(description_data, f, indent=2)
        
        return f"gs://{description_path}"
        
    except Exception as e:
        return f"Error saving description for {patient_id}_{pathway_name}: {str(e)}"

def list_available_pathway_data() -> list[str]:
    """
    List all available patients with pathway data in the bucket.
    
    Returns:
        List of patient IDs
    """
    try:
        # Initialize GCS filesystem
        fs = gcsfs.GCSFileSystem(project=GCP_PROJECT_ID)
        bucket_name = "gdm-hackathon"
        data_path = f"{bucket_name}/data/bulk_rna_pathways/"
        
        if not fs.exists(data_path):
            return []
        
        # List all files in the bulk_rna_pathways directory
        files = fs.ls(data_path)
        
        if not files:
            return []
        
        # Extract patient_id from filenames
        patient_ids = []
        for file_path in files:
            filename = file_path.split('/')[-1]
            if filename.endswith('_signature_scores.json'):
                # Extract patient ID from filename (e.g., "CH_B_030_signature_scores.json")
                patient_id = filename.replace('_signature_scores.json', '')
                
                # Use regex to match the patient ID pattern (CH_B_030, CH_B_033, etc.)
                patient_match = re.match(r'(CH_B_\d+)', patient_id)
                
                if patient_match and patient_id not in patient_ids:
                    patient_ids.append(patient_id)
        
        return patient_ids
        
    except Exception as e:
        print(f"Error listing available pathway data: {str(e)}")
        return []

def generate_pathway_description(patient_id: str, pathway_name: str) -> str:
    """
    Generate a pathway description for a patient and pathway.
    
    Args:
        patient_id: The unique identifier for the patient
        pathway_name: The name of the pathway
        
    Returns:
        A success message with the saved description path
    """
    try:
        # Load the pathway data from the bucket
        pathway_data = load_pathway_scores_from_bucket(patient_id)
        
        if pathway_data is None:
            return f"Error: No pathway data found for {patient_id}"
        
        # Extract the signature scores
        signature_scores = pathway_data.get("signature_scores", {})
        
        if pathway_name not in signature_scores:
            return f"Error: Pathway {pathway_name} not found in data for {patient_id}"
        
        pathway_score = signature_scores[pathway_name]
        pathway_genes = PATHWAY_GENES.get(pathway_name, [])
        
        # Generate the summary using medgemma
        print(f"Generating pathway summary for {patient_id}_{pathway_name}...")
        summary = generate_pathway_summary(patient_id, pathway_name, pathway_score, signature_scores, pathway_genes)
        
        # Save the description to the bucket
        description_path = save_pathway_description_to_bucket(patient_id, pathway_name, summary, pathway_data)
        
        return f"Success! Description saved to {description_path}\n\nSummary preview: {summary[:200]}..."
        
    except Exception as e:
        return f"Error generating pathway description for {patient_id}_{pathway_name}: {str(e)}"

# %%
if __name__ == "__main__":
    # Test the tools
    print("Available patients with pathway data:")
    patient_ids = list_available_pathway_data()
    print(f"Patients: {patient_ids}")
    print(f"Pathways: {list(PATHWAY_GENES.keys())}")
    print("\n" + "="*60)
    
    # Test with a sample patient/pathway
    if patient_ids:
        print("Testing pathway description generation:")
        print(generate_pathway_description(patient_ids[0], "fgfr3"))

# %%
# Generate descriptions for all patients and pathways
patient_ids = list_available_pathway_data()
pathway_names = list(PATHWAY_GENES.keys())

print(f"Generating pathway descriptions for {len(patient_ids)} patients and {len(pathway_names)} pathways...")
print("=" * 60)

for patient_id in patient_ids:
    for pathway_name in pathway_names:
        print(f"\nGenerating description for {patient_id} and {pathway_name}")
        result = generate_pathway_description(patient_id, pathway_name)
        print(result)
        print("-" * 60)

print("\nAll pathway descriptions have been generated and saved to the bucket!")

# %% 