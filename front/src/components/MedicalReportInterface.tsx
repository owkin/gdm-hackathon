import React, { useState, useEffect } from 'react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Check, Loader2 } from 'lucide-react';

interface AnalysisStep {
  id: number;
  title: string;
  status: 'pending' | 'running' | 'completed';
}

const ANALYSIS_STEPS: AnalysisStep[] = [
  { id: 1, title: 'Analyzing immune infiltration patterns', status: 'pending' },
  { id: 2, title: 'Generating histopathological reports with MedGemma', status: 'pending' },
  { id: 3, title: 'Analyzing spatial transcriptomics data', status: 'pending' },
  { id: 4, title: 'Generating clinical report', status: 'pending' },
  { id: 5, title: 'Aggregating information', status: 'pending' },
];

const MOCK_CASES = [
  'Case 001 - Lung Adenocarcinoma',
  'Case 002 - Breast Cancer IDC',
  'Case 003 - Prostate Adenocarcinoma',
  'Case 004 - Colorectal Carcinoma',
  'Case 005 - Melanoma Stage III',
];

const FINAL_REPORT = `# Medical Analysis Report

## Case Summary
**Patient ID:** Case 001  
**Diagnosis:** Lung Adenocarcinoma  
**Analysis Date:** ${new Date().toLocaleDateString()}

## Immune Infiltration Analysis
The tumor microenvironment shows significant immune cell infiltration with predominantly:
- **CD8+ T cells:** High density (45% of immune cells)
- **Macrophages:** Moderate presence (30% of immune cells)  
- **NK cells:** Low but detectable (8% of immune cells)

## Histopathological Findings
MedGemma analysis reveals:
- **Tumor grade:** Moderately differentiated (Grade 2)
- **Architecture:** Acinar and micropapillary patterns
- **Invasion:** Present in surrounding stroma
- **Necrosis:** Focal areas (<10%)

## Spatial Transcriptomics Results
Key pathway activation detected:
- **PI3K/AKT pathway:** Upregulated in tumor core
- **EGFR signaling:** Enhanced in invasive front
- **Immune checkpoint genes:** PD-L1 positive (>50% expression)

## Clinical Recommendations
Based on comprehensive analysis:
1. **Immunotherapy candidacy:** Strong due to high PD-L1 expression
2. **Targeted therapy:** Consider EGFR inhibitors
3. **Monitoring:** Regular immune profiling recommended
4. **Prognosis:** Favorable response expected to combination therapy

## Conclusion
Integrated analysis suggests this patient would benefit from combined immunotherapy and targeted treatment approach. Continued monitoring of immune markers recommended.

---
*Report generated by AI-powered medical analysis system*`;

const SkeletonLoader: React.FC = () => (
  <div className="space-y-4 p-6">
    <div className="h-8 bg-skeleton rounded-md animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%]" />
    <div className="space-y-3">
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%]" />
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%] w-5/6" />
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%] w-4/6" />
    </div>
    <div className="h-6 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%] w-3/4" />
    <div className="space-y-3">
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%]" />
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%] w-5/6" />
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%] w-4/6" />
      <div className="h-4 bg-skeleton rounded animate-pulse-shimmer bg-gradient-to-r from-skeleton via-skeleton-shimmer to-skeleton bg-[length:200px_100%] w-3/4" />
    </div>
  </div>
);

const AnalysisStepItem: React.FC<{ step: AnalysisStep; isVisible: boolean }> = ({ step, isVisible }) => {
  if (!isVisible) return null;

  return (
    <div className="flex items-center gap-4 p-4 animate-fade-in">
      <div className="flex-shrink-0">
        {step.status === 'completed' ? (
          <div className="w-6 h-6 rounded-full bg-success flex items-center justify-center">
            <Check size={16} className="text-success-foreground" />
          </div>
        ) : step.status === 'running' ? (
          <div className="w-6 h-6">
            <Loader2 size={20} className="text-primary animate-spin" />
          </div>
        ) : (
          <div className="w-6 h-6 rounded-full border-2 border-muted" />
        )}
      </div>
      <div className="flex-1">
        <p className={`text-sm font-medium ${
          step.status === 'completed' ? 'text-foreground' : 
          step.status === 'running' ? 'text-primary' : 
          'text-muted-foreground'
        }`}>
          {step.title}
        </p>
      </div>
    </div>
  );
};

const ReportViewer: React.FC<{ content: string }> = ({ content }) => {
  const formatContent = (text: string) => {
    return text.split('\n').map((line, index) => {
      if (line.startsWith('# ')) {
        return <h1 key={index} className="text-2xl font-bold mb-4 text-foreground">{line.slice(2)}</h1>;
      }
      if (line.startsWith('## ')) {
        return <h2 key={index} className="text-xl font-semibold mb-3 mt-6 text-foreground">{line.slice(3)}</h2>;
      }
      if (line.startsWith('**') && line.endsWith('**')) {
        return <p key={index} className="font-semibold mb-2 text-foreground">{line.slice(2, -2)}</p>;
      }
      if (line.startsWith('- ')) {
        return <li key={index} className="ml-4 mb-1 text-foreground list-disc">{line.slice(2)}</li>;
      }
      if (line.startsWith('1. ')) {
        return <li key={index} className="ml-4 mb-1 text-foreground list-decimal">{line.slice(3)}</li>;
      }
      if (line.trim() === '---') {
        return <hr key={index} className="my-6 border-border" />;
      }
      if (line.trim() === '') {
        return <br key={index} />;
      }
      if (line.startsWith('*') && line.endsWith('*')) {
        return <p key={index} className="text-sm text-muted-foreground italic mb-2">{line.slice(1, -1)}</p>;
      }
      return <p key={index} className="mb-2 text-foreground leading-relaxed">{line}</p>;
    });
  };

  return (
    <div className="prose max-w-none p-6">
      {formatContent(content)}
    </div>
  );
};

export const MedicalReportInterface: React.FC = () => {
  const [selectedCase, setSelectedCase] = useState<string>('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisSteps, setAnalysisSteps] = useState<AnalysisStep[]>(ANALYSIS_STEPS);
  const [currentStepIndex, setCurrentStepIndex] = useState(-1);
  const [showReport, setShowReport] = useState(false);

  const startAnalysis = () => {
    setIsAnalyzing(true);
    setCurrentStepIndex(0);
    setShowReport(false);
    
    // Reset all steps
    setAnalysisSteps(ANALYSIS_STEPS.map(step => ({ ...step, status: 'pending' })));
  };

  useEffect(() => {
    if (isAnalyzing && currentStepIndex >= 0 && currentStepIndex < analysisSteps.length) {
      // Set current step to running
      setAnalysisSteps(prev => prev.map((step, index) => ({
        ...step,
        status: index === currentStepIndex ? 'running' : 
               index < currentStepIndex ? 'completed' : 'pending'
      })));

      // Simulate step completion after 2-3 seconds
      const timer = setTimeout(() => {
        setAnalysisSteps(prev => prev.map((step, index) => ({
          ...step,
          status: index <= currentStepIndex ? 'completed' : 'pending'
        })));

        if (currentStepIndex === analysisSteps.length - 1) {
          // Analysis complete
          setIsAnalyzing(false);
          setTimeout(() => setShowReport(true), 500);
        } else {
          // Move to next step
          setCurrentStepIndex(prev => prev + 1);
        }
      }, 2000 + Math.random() * 1000);

      return () => clearTimeout(timer);
    }
  }, [currentStepIndex, isAnalyzing, analysisSteps.length]);

  return (
    <div className="min-h-screen bg-background">
      <div className="container max-w-4xl mx-auto py-12 px-4">
        {/* Initial State */}
        {!isAnalyzing && currentStepIndex === -1 && (
          <div className="text-center space-y-8">
            <div className="space-y-6">
              <h1 className="text-3xl font-bold text-foreground">Medical Report Generation</h1>
              
              <div className="max-w-md mx-auto space-y-4">
                <Select value={selectedCase} onValueChange={setSelectedCase}>
                  <SelectTrigger className="w-full h-12">
                    <SelectValue placeholder="Choose a case..." />
                  </SelectTrigger>
                  <SelectContent>
                    {MOCK_CASES.map((caseItem) => (
                      <SelectItem key={caseItem} value={caseItem}>
                        {caseItem}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Button 
                  onClick={startAnalysis}
                  disabled={!selectedCase}
                  size="lg"
                  className="w-full h-12 text-base font-medium"
                >
                  Analyze
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Analysis in Progress */}
        {(isAnalyzing || currentStepIndex >= 0) && (
          <div className="space-y-8">
            <div className="text-center">
              <h1 className="text-2xl font-bold text-foreground mb-2">Analyzing {selectedCase}</h1>
              <p className="text-muted-foreground">Please wait while we process your case...</p>
            </div>

            {/* Progress Steps */}
            <Card className="max-w-2xl mx-auto">
              <div className="divide-y divide-border">
                {analysisSteps.map((step, index) => (
                  <AnalysisStepItem 
                    key={step.id} 
                    step={step} 
                    isVisible={index <= currentStepIndex}
                  />
                ))}
              </div>
            </Card>

            {/* Report Area */}
            <Card className="max-w-4xl mx-auto min-h-[400px]">
              {showReport ? (
                <ReportViewer content={FINAL_REPORT} />
              ) : (
                <SkeletonLoader />
              )}
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};